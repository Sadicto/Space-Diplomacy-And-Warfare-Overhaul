#include "stdafx.h"
#include "cDiplomacySystem.h"
#include <Spore/Simulator/ConversationResource.h>
#include <Spore/Simulator/SubSystem/CommManager.h>
#include <Spore-Mod-Utils/Include/SporeModUtils.h>
#include "AllianceEnemyButtonProc.h"
#include "cDiplomacyEvent.h"

using namespace SporeModUtils;
using namespace Simulator;

cDiplomacySystem* cDiplomacySystem::instance = nullptr;


/// AUTOGENERATED METHODS ///

int cDiplomacySystem::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int cDiplomacySystem::Release() {
	return Simulator::cStrategy::Release();
}

const char* cDiplomacySystem::GetName() const {
	return "HarderSpaceDiplomacy::cDiplomacySystem";
}

bool cDiplomacySystem::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool cDiplomacySystem::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute cDiplomacySystem::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};


void cDiplomacySystem::Initialize() {
	cycle = 0;
	instance = this;
	diplomacyConfig = nullptr;
	archetypesConfig = nullptr;
	empireRelationsAnalyzer = nullptr;
	diplomacyEventDispatcher = nullptr;
	diplomacyPopUpManager = nullptr;
	diplomacyEffectInfoProvider = nullptr;
	diplomacyEffectAnalyzer = nullptr;
	empireRelationshipController = nullptr;
	diplomacyEventListener = nullptr;

	PropertyListPtr managerConfigProp;

	PropManager.GetPropertyList(id("ManagerConfig"), id("SdoConfig"), managerConfigProp);

	App::Property::GetFloat(managerConfigProp.get(), 0x0D00F9E5, activeRadius);
	App::Property::GetInt32(managerConfigProp.get(), 0xB5BD28BA, cycleInterval);

	App::Property::GetKey(managerConfigProp.get(), 0x13741BB4, spacePopUpsTextsKey);
	App::Property::GetKey(managerConfigProp.get(), 0x6FCEBDBF, diplomacyConfigKey);
	App::Property::GetKey(managerConfigProp.get(), 0x57252EFE, archetypesAffinitiesKey);
	App::Property::GetKey(managerConfigProp.get(), 0x142ECBFA, archetypesAgressivitiesKey);
	App::Property::GetKey(managerConfigProp.get(), 0x76F0A8F2, popupsFilterConfigKey);
	App::Property::GetKey(managerConfigProp.get(), 0x82AE7927, relationshipEffectsKey);
}

void cDiplomacySystem::Dispose() {


}

void cDiplomacySystem::Update(int deltaTime, int deltaGameTime) {
	if (IsSpaceGame()) {
		elapsedTime += deltaGameTime;
		if (elapsedTime > cycleInterval) {
			EmpireDiplomacyCycle();
			elapsedTime = 0;
			cycle++;
			App::ConsolePrintF("diplomacy cycle: %d", cycle);
		}
	}
}

void cDiplomacySystem::OnModeEntered(uint32_t previousModeID, uint32_t newModeID) {
	if (newModeID == GameModeIDs::kGameSpace) {
		diplomacyConfig = new cDiplomacyConfig(diplomacyConfigKey);

		archetypesConfig = new cArchetypesConfig(archetypesAffinitiesKey, archetypesAgressivitiesKey);

		empireRelationsAnalyzer = new cEmpireRelationsAnalyzer(diplomacyConfig.get(), archetypesConfig.get());

		diplomacyEventDispatcher = new cDiplomacyEventDispatcher();

		diplomacyPopUpManager = new cDiplomacyPopupManager(spacePopUpsTextsKey, popupsFilterConfigKey);

		diplomacyEffectInfoProvider = new cDiplomacyEffectInfoProvider(relationshipEffectsKey);

		diplomacyEffectAnalyzer = new cDiplomacyEffectAnalyzer(diplomacyEffectInfoProvider.get());

		empireRelationshipController = new cEmpireRelationshipController(diplomacyEffectAnalyzer.get());

		diplomacyEventListener = new cDiplomacyEventListener(diplomacyPopUpManager.get(), empireRelationshipController.get());

		MessageManager.AddListener(diplomacyEventListener.get(), cDiplomacyEvent::ID);

		empiresDiplomacy.clear();

		cycle = 0;
		elapsedTime = 0;
		UILayoutPtr globalUiLayout = SimulatorSpaceGame.GetUI()->mpGlobalUI->mpLayout;
		if (globalUiLayout != nullptr) {
			UTFWin::IWindow* window = globalUiLayout->FindWindowByID(0x02E1CBD7);
			AllianceEnemyButtonProc* proc = new AllianceEnemyButtonProc();
			window->AddWinProc(proc);
		}
	}
}

void cDiplomacySystem::OnModeExited(uint32_t previousModeID, uint32_t newModeID) {
	if (previousModeID == GameModeIDs::kGameSpace) {
		diplomacyConfig.reset();
		archetypesConfig.reset();
		empireRelationsAnalyzer.reset();
		diplomacyEventDispatcher.reset();
		diplomacyPopUpManager.reset();
		diplomacyEffectInfoProvider.reset();
		diplomacyEffectAnalyzer.reset();
		empireRelationshipController.reset();

		MessageManager.RemoveListener(diplomacyEventListener.get(), cDiplomacyEvent::ID);
		diplomacyEventListener.reset();

		empiresDiplomacy.clear();
	}
}

bool cDiplomacySystem::WriteToXML(XmlSerializer*)
{
	return true;
}

cDiplomacySystem* cDiplomacySystem::Get() {
	return instance;
}

void cDiplomacySystem::EmpireDiplomacyCycle() {
	empiresDiplomacy.clear();
	eastl::vector<cEmpirePtr> empires;
	EmpireUtils::GetEmpiresInRadius(GetActiveStarRecord()->mPosition, activeRadius, empires);
	for (cEmpirePtr empire : empires) {
		if (EmpireUtils::ValidNpcEmpire(empire.get())) {
			cEmpireDiplomacyPtr empireDiplomacy = new cEmpireDiplomacy(empire.get(), diplomacyConfig.get(), empireRelationsAnalyzer.get(), diplomacyEventDispatcher.get());
			empiresDiplomacy.push_back(empireDiplomacy);
		}
	}
	// TODO the alliance strenght.
	for (cEmpireDiplomacyPtr empireDiplomacy : empiresDiplomacy) {
		if (EmpireUtils::ValidNpcEmpire(empireDiplomacy->empire.get())) {
			empireDiplomacy->ManageDiplomacy();
		}
	}
}