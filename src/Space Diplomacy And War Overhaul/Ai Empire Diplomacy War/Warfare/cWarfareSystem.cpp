#include "stdafx.h"
#include "cWarfareSystem.h"
#include "cPlanetAttackedEvent.h"
#include <Spore-Mod-Utils/Include/SporeModUtils.h>
using namespace SporeModUtils;
using namespace Simulator;

/// AUTOGENERATED METHODS ///

int cWarfareSystem::AddRef() {
	return Simulator::cStrategy::AddRef();
}
int cWarfareSystem::Release() {
	return Simulator::cStrategy::Release();
}

const char* cWarfareSystem::GetName() const {
	return "Ai_Empire_Diplomacy::cWarfareSystem";
}

bool cWarfareSystem::Write(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Write(stream);
}
bool cWarfareSystem::Read(Simulator::ISerializerStream* stream)
{
	return Simulator::ClassSerializer(this, ATTRIBUTES).Read(stream);
}

/// END OF AUTOGENERATED METHODS ///
////////////////////////////////////

Simulator::Attribute cWarfareSystem::ATTRIBUTES[] = {
	// Add more attributes here
	// This one must always be at the end
	Simulator::Attribute()
};

void cWarfareSystem::Initialize() {
	warfareConfig = nullptr;
	spaceCombatMetrics = nullptr;
	warfareStrengthAnalyzer = nullptr;
	warfareEventDispatcher = nullptr;
	warfareEventListener = nullptr;

	PropertyListPtr managerConfigProp;

	PropManager.GetPropertyList(id("ManagerConfig"), id("SwoConfig"), managerConfigProp);

	App::Property::GetInt32(managerConfigProp.get(), 0x86C25CEA, cycleInterval);
	App::Property::GetFloat(managerConfigProp.get(), 0x0D00F9E5, activeRadius);

	App::Property::GetKey(managerConfigProp.get(), 0x0FCF340F, warfareConfigKey);
	App::Property::GetKey(managerConfigProp.get(), 0x9BD9B276, spaceCombatKey);
	elapsedTime = 0;
	cycle = 0;
	
}

void cWarfareSystem::Dispose() {
	
}

void cWarfareSystem::Update(int deltaTime, int deltaGameTime) {
	if (IsSpaceGame()) {
		elapsedTime += deltaGameTime;
		if (elapsedTime > cycleInterval) {
			WarfareCycle();
			elapsedTime = 0;
			cycle++;
			App::ConsolePrintF("warfare cycle: %d", cycle);
		}
	}
}

void cWarfareSystem::OnModeEntered(uint32_t previousModeID, uint32_t newModeID) {
	if (newModeID == GameModeIDs::kGameSpace) {
		warfareConfig = new cWarfareConfig(warfareConfigKey);
		spaceCombatMetrics = new cSpaceCombatMetrics(spaceCombatKey);
		warfareStrengthAnalyzer = new cWarfareStrengthAnalyzer(warfareConfig.get(), spaceCombatMetrics.get());
		warfareEventDispatcher = new cWarfareEventDispatcher();
		warfareEventListener = new cWarfareEventListener();
		MessageManager.AddListener(warfareEventListener.get(), cPlanetAttackedEvent::ID);
		empiresWarfare.clear();

		elapsedTime = 0;
		cycle = 0;
	}
}

void cWarfareSystem::OnModeExited(uint32_t previousModeID, uint32_t newModeID) {
	if (previousModeID == GameModeIDs::kGameSpace) {
		warfareConfig.reset();
		spaceCombatMetrics.reset();
		warfareStrengthAnalyzer.reset();
		warfareEventDispatcher.reset();

		MessageManager.RemoveListener(warfareEventListener.get(), cPlanetAttackedEvent::ID);
		warfareEventListener.reset();
		empiresWarfare.clear();
	}
}

bool cWarfareSystem::WriteToXML(XmlSerializer*)
{
	return true;
}

void cWarfareSystem::WarfareCycle() {
	empiresWarfare.clear();
	eastl::vector<cEmpirePtr> empires;
	EmpireUtils::GetEmpiresInRadius(GetActiveStarRecord()->mPosition, activeRadius, empires);
	for (cEmpirePtr empire : empires) {
		if (EmpireUtils::ValidNpcEmpire(empire.get())) {
			cEmpireWarfarePtr empireDiplomacy = new cEmpireWarfare(empire.get(), warfareConfig.get(), warfareStrengthAnalyzer.get(), warfareEventDispatcher.get());
			empiresWarfare.push_back(empireDiplomacy);
		}
	}
	for (cEmpireWarfarePtr empireWarfare : empiresWarfare) {
		if (EmpireUtils::ValidNpcEmpire(empireWarfare->empire.get())) {
			empireWarfare->SelectAndAttackTargets();
		}
	}
}